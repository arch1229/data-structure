"""
lang: python3
code by -arch1229

1. Program Efficiency를 어떻게 측정하는 것일까?

주어진 정수배열 A에서 최솟값 m을 반환하는 코드를 2가지 정도 짜보고(예시)
어떤 코드가 더 Efficiency 측면에서 좋은지 수학적 계산을 통해 판단해보자.

input: array_A = [ A[0], A[1], ... , A[n-1] ]
output = min_A
"""

# 정수배열 A 생성 // 100개의 index에 0~100까지의 임의의 수를 넣은 배열
import random
array_A = []
for index in range(100):
	array_A.append(random.randint(0,100))

# 1번 코드 // 100개의 index를 각각 다른 값들(99개의 값들)과 비교하여 가장 작은 index값을 최솟값으로 지정하는 코드

for i in range(len(array_A)):
	isMin = True
	for j in range(len(array_A)):
		if array_A[j] < array_A[i]:
			isMin = False
	if isMin == True:
		min_A = array_A[i]

# 2번 코드 // 배열의 첫번째 index를 임시 최솟값으로 지정하고, index를 하나씩 늘리면서 임시 최솟값보다 작은 값을 가진 index를 새로운 임시 최솟값으로 지정하는 코드

min_A = array_A[0]
for i in range(len(array_A)):
	if array_A[i] < min_A:
		min_A = array_A[i]

"""
코드의 길이만을 봤을 때는 2번코드가 훨씬 효율적으로 보인다.
하지만 이는 수학적으로 접근하는 것이 아니므로, 코드의 길이를 가지고 판단하는 것은 잘못된 것이다.

그렇다면 실제 코드의 Running time을 측정하는 것은 어떨까?
경험적으로는 옳은 판단이라고 할 수 있지만, 이 역시 수리적으로 증명할 수 없다.

따라서, 우리는 input_size를 n으로 놓고(이 경우 array_A의 index 수) 이를 통해 수리적인 식을 도출해 볼 것이다.
이를 위해서 하나의 가정을 할 것이다.

가정) 모든 각각의 연산은 1ns(nanosecond)가 소요된다. for문에서 i가 1씩 증가하거나, 변수에 값을 대입하거나, 비교연산자를 활용하는 등의 모든 연산을 포함함

이를 통해 각 코드의 연산시간을 식으로 나타내면,
1번 코드는
3(n-1) + 1 + 3(n-1)^2
= 3n^2 -3n + 1

2번 코드는
1 + 3(n-1)
= 3n - 2

가 된다.
사실 이렇게까지 구체적인 식은 필요없고, n에 대한 함수의 최고차항만 주시하면 된다. 고등학교에서 n을 양의 극한으로 보낼 때처럼 말이다.
최고차항의 계수조차 시간복잡도 함수에서는 크게 중요하지 않다.
2n과 3n은 같은 1차함수이므로 둘다 O(n)이라고 정의한다.
하지만 n^2과 100n은 최고차항이 다르므로 전자는 O(n^2), 후자는 O(n)이다. 이 둘의 Efficiency는 매우 다르다. n이 커질수록 둘의 결과 차이도 커지기 때문이다.
"""
